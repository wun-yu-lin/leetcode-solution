public class No_27_Remove_Element {
    class Solution {
        public int removeElement(int[] nums, int val) {
            int p1 = 0;
            int temp = 0;

            for (int p2=0; p2 < nums.length; p2++) {
                if (nums[p2] != val) {
                    temp = nums[p1];
                    nums[p1] = nums[p2];
                    nums[p2] = temp;
                    p1++;
                }
            }
            return p1;
        }
    }


//這段程式碼是用來實現 **移除數組中的特定值**，並返回移除後的數組長度。此方法以原地修改陣列的方式完成，保留數組中不等於指定值的元素。以下是詳細的解釋：
//
//        ### 方法目標：
//        - 將數組 `nums` 中等於 `val` 的所有元素移除。
//        - 返回移除後數組的長度。
//        - 移除後數組的內容並不需要保持原順序，但剩下的元素必須連續存放在數組的前幾位。
//
//        ---
//
//        ### 方法邏輯：
//        1. **變數初始化：**
//        - `p1`（指針1）：用於追蹤下一個不等於 `val` 的元素存放的位置。
//        - `temp`：用於暫存交換元素的值。
//
//        2. **遍歷數組：**
//        - 使用 `for` 迴圈，指針 `p2` 遍歷數組的每個元素。
//        - 當前元素（`nums[p2]`）不等於 `val` 時：
//        1. 把元素交換到指針 `p1` 的位置。
//        2. 將 `p1` 向前移動一位（準備放置下一個不等於 `val` 的元素）。
//
//        3. **返回結果：**
//        - 當迴圈結束時，`p1` 表示移除後數組的長度。
//
//        ---
//
//        ### 程式行為逐行解析：
//        #### 假設：
//        數組 `nums = [3, 2, 2, 3]`，移除目標值 `val = 3`。
//
//        1. 初始化：`p1 = 0`，`temp = 0`。
//        2. **迴圈開始：**
//        - **第一輪（`p2 = 0`）：**
//        - `nums[0] = 3`，等於 `val`，跳過。
//        - 此時，`p1 = 0`。
//        - **第二輪（`p2 = 1`）：**
//        - `nums[1] = 2`，不等於 `val`。
//        - 交換：`temp = nums[0]`，`nums[0] = nums[1]`，`nums[1] = temp`。
//        - 結果：`nums = [2, 3, 2, 3]`。
//        - `p1` 增加：`p1 = 1`。
//        - **第三輪（`p2 = 2`）：**
//        - `nums[2] = 2`，不等於 `val`。
//        - 交換：`temp = nums[1]`，`nums[1] = nums[2]`，`nums[2] = temp`。
//        - 結果：`nums = [2, 2, 3, 3]`。
//        - `p1` 增加：`p1 = 2`。
//        - **第四輪（`p2 = 3`）：**
//        - `nums[3] = 3`，等於 `val`，跳過。
//        - 此時，`p1 = 2`。
//
//        3. **迴圈結束：**
//        - 移除後的數組長度為 `p1 = 2`。
//        - 數組的前兩個元素為 `[2, 2]`，其餘部分可以忽略。
//
//        ---
//
//        ### 時間與空間複雜度：
//        - **時間複雜度：**
//        遍歷一次數組，時間複雜度為 \(O(n)\)。
//        - **空間複雜度：**
//        除了常數變數外，未使用額外空間，空間複雜度為 \(O(1)\)。
//
//        ### 例子輸入與輸出：
//        ```java
//        int[] nums = {3, 2, 2, 3};
//        int val = 3;
//        Solution sol = new Solution();
//        int length = sol.removeElement(nums, val);
//        // length = 2
//        // nums 的前兩個元素是 [2, 2]
//        ```ls

}

