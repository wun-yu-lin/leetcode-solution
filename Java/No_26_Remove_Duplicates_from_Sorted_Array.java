public class No_26_Remove_Duplicates_from_Sorted_Array {
    class Solution {
        public int removeDuplicates(int[] nums) {

            int i = 0;
            for (int j = 0; j < nums.length; j++) {
                if (nums[i] != nums[j]) {
                    i++;
                    nums[i] = nums[j];
                }
            }
            return i + 1;
        }
    }


//這段程式碼的功能是從已經排序好的數組中移除重複的元素，並返回移除重複元素後的數組長度。原數組會被修改以保留非重複元素，但重複的部分可以忽略。
//
//        ---
//
//        ### 方法目標
//        - 從排序數組 `nums` 中移除重複的元素，保留每個元素的第一個出現位置。
//        - 返回移除重複元素後的數組長度。
//        - 修改後的數組在前 \(n\) 個位置保留去重後的元素，其順序保持不變。
//
//        ---
//
//        ### 方法邏輯
//        1. **變數初始化**：
//        - `i`：用於追蹤去重後的數組最後一個有效位置。
//        - `j`：用於遍歷數組的每個元素。
//
//        2. **遍歷數組**：
//        - 如果 `nums[i]` 和 `nums[j]` 不相等：
//        1. 增加 `i`（準備記錄新元素的位置）。
//        2. 將 `nums[j]` 的值複製到 `nums[i]`。
//        - 否則，直接跳過。
//
//        3. **返回結果**：
//        - 最後，返回去重後的數組長度，對應的值是 `i + 1`。
//
//        ---
//
//        ### 逐行解析
//        假設輸入數組 `nums = [1, 1, 2]`。
//
//        1. 初始化：`i = 0`。
//
//        2. **迴圈開始**：
//        - **第一輪（`j = 0`）：**
//        - 比較：`nums[i] = nums[0] = 1`，`nums[j] = nums[0] = 1`。
//        - 相等，跳過，`i = 0`。
//        - **第二輪（`j = 1`）：**
//        - 比較：`nums[i] = nums[0] = 1`，`nums[j] = nums[1] = 1`。
//        - 相等，跳過，`i = 0`。
//        - **第三輪（`j = 2`）：**
//        - 比較：`nums[i] = nums[0] = 1`，`nums[j] = nums[2] = 2`。
//        - 不相等：
//        1. `i` 增加：`i = 1`。
//        2. 將 `nums[j]` 複製到 `nums[i]`：`nums[1] = nums[2] = 2`。
//        - 更新後的數組為 `[1, 2, 2]`。
//
//        3. **迴圈結束**：
//        - `i = 1`，說明去重後數組的有效長度為 `i + 1 = 2`。
//
//        ---
//
//        ### 輸入與輸出
//        假設數組 `nums = [1, 1, 2]`：
//
//        1. 輸出長度：`2`。
//        2. 修改後數組的前兩個元素是 `[1, 2]`，後面的部分可以忽略。
//
//        ---
//
//        ### 程式運行的關鍵：
//        - 數組是 **已排序** 的，這保證了重複的元素一定是相鄰的。
//        - 指針 `i` 只記錄去重後有效元素的位置。
//
//        ---
//
//        ### 時間與空間複雜度
//        - **時間複雜度：**
//        遍歷數組一次，時間複雜度為 \(O(n)\)。
//        - **空間複雜度：**
//        除了常數變數，未使用額外空間，空間複雜度為 \(O(1)\)。
//
//        ---
//
//        ### 例子測試
//        ```java
//        int[] nums = {1, 1, 2};
//        Solution sol = new Solution();
//        int length = sol.removeDuplicates(nums);
//        // length = 2
//        // nums 的前兩個元素是 [1, 2]
//        ```

}

